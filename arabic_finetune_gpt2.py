# -*- coding: utf-8 -*-
"""arabic_fineTune_gpt2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EhduciBmaWJkhPU9Ere8Hn64dS6ZZgsX

## **Arabic Fine-tune Gpt-2 "Poet" model**
**We are going to fine-tune a Arabic GPT-2 from the Huggingface model hub. As fine-tune, data we are using the poets Dataset, which consists of 45000 arabic lines of poets..**

**The idea is we use the poet to fine-tune our GPT-2 to let us write poet we can.**
"""

!pip install transformers==4.2.2
!pip install -q gradio
!pip3 install torch

!nvidia-smi

"""**we are going to split the data into a train and test section.
85% of the data is train_dataset.txt and the rest is test_dataset.txt**
"""

import re
import json
from sklearn.model_selection import train_test_split

data =[]
with open('ap.txt') as f:
  for line in f:
    data.append(line)

train, test = train_test_split(data,test_size=0.15) 

def build_text_files(data_txt, dest_path):
    f = open(dest_path, 'w')
    data = ''
    for texts in data_txt:
        summary = texts
        data += summary + "  "
    f.write(data)

build_text_files(train,'train_dataset.txt')
build_text_files(test,'test_dataset.txt')

print("Train dataset length: "+str(len(train)))
print("Test dataset length: "+ str(len(test)))

"""**the next step is to download the tokenizer, which we use. We use the tokenizer from the "gpt2-small-arabic-poetry" model on huggingface.**"""

from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("akhooli/gpt2-small-arabic")

train_path = 'train_dataset.txt'
test_path = 'test_dataset.txt'

from transformers import TextDataset,DataCollatorForLanguageModeling

def load_dataset(train_path,test_path,tokenizer):
    train_dataset = TextDataset(
          tokenizer=tokenizer,
          file_path=train_path,
          block_size=128)
     
    test_dataset = TextDataset(
          tokenizer=tokenizer,
          file_path=test_path,
          block_size=128)   
    
    data_collator = DataCollatorForLanguageModeling(
        tokenizer=tokenizer, mlm=False,
    )
    return train_dataset,test_dataset,data_collator

train_dataset,test_dataset,data_collator = load_dataset(train_path,test_path,tokenizer)

"""Initialize Trainer with TrainingArguments and GPT-2 model
The Trainer class provides an API for feature-complete training. It is used in most of the example scripts from Huggingface. Before we can instantiate our Trainer we need to download our GPT-2 model and create a TrainingArguments to access all the points of customization during training. In the TrainingArguments, we can define the Hyperparameters we are going to use in the training process like our learning_rate, num_train_epochs, or per_device_train_batch_size.
"""

from transformers import Trainer, TrainingArguments,AutoModelWithLMHead

thenewmodel = AutoModelWithLMHead.from_pretrained("akhooli/gpt2-small-arabic")
theoriginalmodel = AutoModelWithLMHead.from_pretrained("akhooli/gpt2-small-arabic")

training_args = TrainingArguments(
    output_dir="./gpt2-arabic", #The output directory
    overwrite_output_dir=True, #overwrite the content of the output directory
    num_train_epochs=5, # number of training epochs
    per_device_train_batch_size=15, # batch size for training
    per_device_eval_batch_size=64,  # batch size for evaluation
    eval_steps = 400, # Number of update steps between two evaluations.
    save_steps=800, # after # steps model is saved 
    warmup_steps=500,# number of warmup steps for learning rate scheduler
    prediction_loss_only=True,
    )


trainer = Trainer(
    model=thenewmodel,
    args=training_args,
    data_collator=data_collator,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
)

"""**Train and save the model**

To train the model we can simply run `Trainer.train()`.
This will save the trained model to our output_dir from our TrainingArguments.
"""

trainer.train()

"""After training is done you can save the model by calling save_model(). This will save the trained model to our output_dir from our TrainingArguments."""

trainer.save_model()

"""##**Test the model**
**To test the model we are going to use another highlight of the transformers library called pipeline. Pipelines are objects that offer a simple API dedicated to several tasks, among others also text-generation**
"""

from transformers import pipeline
trained_model = AutoModelWithLMHead.from_pretrained("./gpt2-arabic")

"""### **model generate text generate text of the new model**"""

input_text = "لكنهم أطفالها الهائمون منذ صحوة الخليقة "
input_ids_p = tokenizer.encode(input_text, return_tensors='pt').to('cuda') 
trained_model.to('cuda');
input_ids_p

input_text = "لكنهم أطفالها الهائمون منذ صحوة الخليقة "
sample_outputs_p = trained_model.generate(input_ids_p, pad_token_id=50256,
                                   do_sample=True, 
                                   max_length=100, 
                                   min_length=20,
                                   top_k=50,
                                   num_return_sequences=2,
                                   repetition_penalty=1.9)

for i, sample_output in enumerate(sample_outputs_p):
    gen = tokenizer.decode(sample_output.tolist())
    print(20*'=', '\n')
    print(f"Sample {i+1}")
    for line in gen.split('.')[:-1]:
        print(line)

"""### **Old model generate text**"""

# Tokenize the input string
input = tokenizer.encode(input_text, return_tensors="pt")

# Run the old model
output = theoriginalmodel.generate(input, max_length=50, do_sample=True)

# Print the output
for i in range(len(output)):
  print('\n',tokenizer.decode(output[i]))

"""###**comparing between the new and the old embedding vector**"""

# before
text_index = tokenizer.encode(input_text)
vector1 = theoriginalmodel.transformer.wte.weight[text_index,:]
vector1

# after
text_index = tokenizer.encode(input_text)
vector2 = trained_model.transformer.wte.weight[text_index,:]
vector2